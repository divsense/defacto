A typed operad
\Ocirc
has:

• a set
T
of types.

• collections of operations
O(t_1,...,t_n ; t)
where
t_i, t \in T
. Here
t_1, \dots, t_n
are the types of the inputs, while
t
is the type of the output.

• ways to compose operations. Given an operation
f \in O(t_1,\dots,t_n ;t)
and
n
operations

g_1 \in O(t_{11},\dots,t_{1 k_1}; t_1),\dots, g_n \in O(t_{n1},\dots,t_{n k_n};t_n)

we can compose them to get

f \circ (g_1,\dots,g_n) \in O(t_{11}, \dots, t_{nk_n};t)

These must obey some rules.

But if you haven’t seen operads before, you’re probably reeling in horror—so I need to rush in and save you by showing you the all-important pictures that help explain what’s going on!

First of all, you should visualize an operation
f \in O(t_1, \dots, t_n; t)
as a little gizmo like this:


It has
n
inputs at top and one output at bottom. Each input, and the output, has a ‘type’ taken from the set
T.
So, for example, if you operation takes two real numbers, adds them and spits out the closest integer, both input types would be ‘real’, while the output type would be ‘integer’.

The main thing we do with operations is compose them. Given an an operation
f \in O(t_1,\dots,t_n ;t),
we can compose it with
n
operations

g_1 \in O(t_{11},\dots,t_{1 k_1}; t_1), \quad \dots, \quad g_n \in O(t_{n1},\dots,t_{n k_n};t_n)

by feeding their outputs into the inputs of
f,
like this:


The result is an operation we call

f \circ (g_1, \dots, g_n)

Note that the input types of
f
have to match the output types of the
g_i
for this to work! This is the whole point of types: they forbid us from composing operations in ways that don’t make sense.

This avoids certain stupid mistakes. For example, you can take the square root of a positive number, but you may not want to take the square root of a negative number, and you definitely don’t want to take the square root of a hamburger. While you can land a plane on an airstrip, you probably don’t want to land a plane on a person.

The operations in an operad are quite abstract: they aren’t really operating on anything. To render them concrete, we need another idea: operads have ‘algebras’.

An algebra
A
of the operad
O
specifies a set of things of each type
t \in T
such that the operations of
O
act on these sets. A bit more precisely, an algebra consists of:

• for each type
t \in T,
a set
A(t)
of things of type
t

• an action of
O
on
A,
that is, a collection of maps

\alpha : O(t_1,...,t_n ; t) \times A(t_1) \times \cdots \times A(t_n) \to A(t)
